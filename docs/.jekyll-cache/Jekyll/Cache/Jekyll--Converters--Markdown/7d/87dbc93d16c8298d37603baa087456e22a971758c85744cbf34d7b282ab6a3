I"·"<p>Creating this blogpost almost entirely to share one writeup :P.</p>

<p>I saw UMassCTF on <a href="ctftime.org">ctftime</a> one fine day and decided to delve into the cryptography challenges.</p>

<p>Due to my mountains of homework I opted only to attempt the RSA challenge and I solved it! â€¦ after the CTF ended.</p>

<p>Nevertheless I think that my writeup will be of help to my learning and of utility to future CTF players.</p>

<h1 id="weirdrsa-500-pts">WeirdRSA (500 pts)</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Wanna take a look at this challenge? 

I tried the normal decryption for RSA but for some reason it isn't working.

http://static.ctf.umasscybersec.org/crypto/3e057374-8731-4bf5-be5c-c436a8dab580/chall.py

Created by Soul#8230
</code></pre></div></div>

<h2 id="reconnaissance">Reconnaissance</h2>

<p>We are greeted by this interesting snippet:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">random</span>
<span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="n">isPrime</span>

<span class="n">m</span><span class="p">,</span> <span class="n">Q</span> <span class="o">=</span> <span class="s">"""REDACTED"""</span><span class="p">,</span> <span class="mi">1</span> 

<span class="k">def</span> <span class="nf">genPrimes</span><span class="p">(</span><span class="n">size</span><span class="p">):</span>
    <span class="n">base</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="n">getrandbits</span><span class="p">(</span><span class="n">size</span> <span class="o">//</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">size</span> <span class="o">//</span> <span class="mi">2</span>
    <span class="n">base</span> <span class="o">=</span> <span class="n">base</span> <span class="o">|</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">1023</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">1022</span><span class="p">)</span> <span class="o">|</span> <span class="mi">1</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">temp</span> <span class="o">=</span> <span class="n">base</span> <span class="o">|</span> <span class="n">random</span><span class="p">.</span><span class="n">getrandbits</span><span class="p">(</span><span class="n">size</span> <span class="o">//</span> <span class="mi">4</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">isPrime</span><span class="p">(</span><span class="n">temp</span><span class="p">):</span>
            <span class="n">p</span> <span class="o">=</span> <span class="n">temp</span>
            <span class="k">break</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">temp</span> <span class="o">=</span> <span class="n">base</span> <span class="o">|</span> <span class="n">random</span><span class="p">.</span><span class="n">getrandbits</span><span class="p">(</span><span class="n">size</span> <span class="o">//</span> <span class="mi">4</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">isPrime</span><span class="p">(</span><span class="n">temp</span><span class="p">):</span>
            <span class="n">q</span> <span class="o">=</span> <span class="n">temp</span>
            <span class="k">break</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">pow</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>     
    <span class="k">return</span> <span class="n">v</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">v</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">2</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">m</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">m</span><span class="o">*</span><span class="n">v</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">-</span> <span class="n">Q</span><span class="o">*</span><span class="n">v</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">))</span> <span class="o">%</span> <span class="n">N</span>

<span class="n">p</span><span class="p">,</span> <span class="n">q</span> <span class="o">=</span> <span class="n">genPrimes</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>

<span class="n">N</span> <span class="o">=</span> <span class="n">p</span> <span class="o">*</span> <span class="n">q</span>
<span class="n">e</span> <span class="o">=</span> <span class="mh">0x10001</span>

<span class="k">print</span><span class="p">(</span><span class="s">"N:"</span><span class="p">,</span> <span class="n">N</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"c:"</span><span class="p">,</span> <span class="nb">pow</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">N</span><span class="p">))</span>

<span class="s">"""
N: 18378141703504870053256589621469911325593449136456168833252297256858537217774550712713558376586907139191035169090694633962713086351032581652760861668116820553602617805166170038411635411122411322217633088733925562474573155702958062785336418656834129389796123636312497589092777440651253803216182746548802100609496930688436148522617770670087143010376380205698834648595913982981670535389045333406092868158446779681106756879563374434867509327405933798082589697167457848396375382835193219251999626538126258606572805220878283429607438382521692951006432650132816122705167004219371235964716616826653226062550260270958038670427
c: 14470740653145070679700019966554818534890999807830802232451906444910279478539396448114592242906623394239703347815141824698585119347592990685923384931479024856262941313458084648914561375377956072245149926143782368239175037299219241806241533201175001088200209202522586119648246842120571566051381821899459346757935757111233323915022287370687524912870425787594648397524189694991735372527387329346198018567010117587531474035014342584491831714256980975368294579192077738910916486139823489975038981139084864837358039928972730135031064241393391678984872799573965150169368237298603189344477806873779325227557835790957023000991
"""</span>
</code></pre></div></div>

<p>Those familiar with RSA should instantly spot the strange exponentiation function <code class="language-plaintext highlighter-rouge">pow(m,e,N)</code>. It seems to be some kind of recurrence relation (precisely, a Lucas sequence) of the form</p>

\[v(n) = Pv(n-1)-Qv(n-2)\]

<p>and we are to somehow invert it.</p>

<p>Some quick google-fu brings us to <a href="https://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=5140063BDB10AB1388C9AAB52A8071A1?doi=10.1.1.32.1835&amp;rep=rep1&amp;type=pdf">this paper</a> that talks about the use of Lucas sequences to <strong>substitute for modular exponentiation</strong> in RSA.</p>

<p>This cryptosystem, for the sake of namedropping, is called <code class="language-plaintext highlighter-rouge">Lucas RSA</code> or <code class="language-plaintext highlighter-rouge">LUCRSA</code>, whatever have you.</p>

<h2 id="reading-the-paper">Reading the Paper</h2>

<p>Reading the paper</p>

<h2 id="n00bcak-outtakes">N00bcak Outtakes</h2>

<p>My first instinct was, bizarrely, to derive the closed form solution of the sequence.</p>

<p>This, I would not have realized on my 11pm brain, would involve surds and is rather dumb.</p>

<p>In case you are curious, we can rewrite the recurrence relation in its characteristic equation to obtain:</p>

\[r^n = Pr^{n-1} - Qr^{n-2}\]

<p>which simplifies to</p>

\[r^{n-2}(r^{2} - Pr + Q) = 0\]
:ET